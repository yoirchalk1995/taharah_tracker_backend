generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id @unique @default(uuid())
  name_encrypt    String
  name_iv         String
  name_tag        String
  email_encrypt   String
  email_iv        String
  email_tag       String
  email_hash      String            @unique
  password_hash   String
  currentStatus   Status    @default(tahor)
  statusUntil     DateTime?
  fixed_veset     FixedVesets?
  options         Options?
  payments        Payments[]
  periods         Periods[]
  potential_veset PotentialVesets[]
  otp Otps[]
}

model Options {
  userId String @id @unique
  user   Users  @relation(fields: [userId], references: [id])
  location String
  receiveAlerts Boolean
}

model Periods {
  id                   Int               @id @default(autoincrement())
  userId               String
  period_dateTime      DateTime
  hebrew_day           Int
  hebrew_month         Int
  hebrew_year          Int
  onah                 Onah
  type                 PeriodType
  locationCode         Int
  notes                String?
  created_at           DateTime          @default(now())
  period_fixed_veset_1 FixedVesets?      @relation("FixedVesetPeriod1")
  period_fixed_veset_2 FixedVesets?      @relation("FixedVesetPeriod2")
  period_fixed_veset_3 FixedVesets?      @relation("FixedVesetPeriod3")
  user                 Users             @relation(fields: [userId], references: [id])
  PotentialVeset       PotentialVesets[] @relation("VesetBase")
}

model Payments {
  id          Int           @id @default(autoincrement())
  userId      String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String
  status      PaymentStatus
  provider    String?
  providerRef String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        Users         @relation(fields: [userId], references: [id])
}

model PotentialVesets {
  id               Int       @id @default(autoincrement())
  userId           String
  type             VesetType
  periodId         Int
  expectedDate     String
  onah             Onah
  notes            String?
  createdAt        DateTime  @default(now())
  basisPeriod      Periods   @relation("VesetBase", fields: [periodId], references: [id])
  user             Users     @relation(fields: [userId], references: [id])
}

model FixedVesets {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  period1Id    Int      @unique
  period2Id    Int      @unique
  period3Id    Int      @unique
  expectedDate DateTime
  onah         Onah
  createdAt    DateTime @default(now())
  period1      Periods  @relation("FixedVesetPeriod1", fields: [period1Id], references: [id])
  period2      Periods  @relation("FixedVesetPeriod2", fields: [period2Id], references: [id])
  period3      Periods  @relation("FixedVesetPeriod3", fields: [period3Id], references: [id])
  user         Users    @relation(fields: [userId], references: [id])
}

model Locations {
  location String @id
  code     Int    @unique(map: "Location_code_key")
}

model Otps {
  id String @id @default(uuid())
  userId String
  OTP String
  iat DateTime @default(now())
  used Boolean @default(false)
  user Users @relation(fields: [userId], references: [id])
}

enum Onah {
  day
  night
}

enum PeriodType {
  period
  staining
  birthBoy
  birthGirl
  miscarriage
}

enum Status{
  tahor
  fiveDays
  tomei
  afterBirth
  sevenClean
}

enum PaymentMethod {
  paypal
  bankTransfer
  card
}

enum PaymentStatus {
  success
  fail
  pending
  cancelled
}

enum VesetType {
  chodesh
  haflaga
  beinoni
}

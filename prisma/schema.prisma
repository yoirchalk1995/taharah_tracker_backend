generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FixedVesets {
  id                                     Int      @id @default(autoincrement())
  userId                                 String   @unique
  period1Id                              Int      @unique
  period2Id                              Int      @unique
  period3Id                              Int      @unique
  expectedDate                           DateTime
  onah                                   Onah
  createdAt                              DateTime @default(now())
  Periods_FixedVesets_period1IdToPeriods Periods  @relation("FixedVesets_period1IdToPeriods", fields: [period1Id], references: [id])
  Periods_FixedVesets_period2IdToPeriods Periods  @relation("FixedVesets_period2IdToPeriods", fields: [period2Id], references: [id])
  Periods_FixedVesets_period3IdToPeriods Periods  @relation("FixedVesets_period3IdToPeriods", fields: [period3Id], references: [id])
  Users                                  Users    @relation(fields: [userId], references: [id])
}

model Locations {
  location String
  code     Int    @unique(map: "Location_code_key")
}

model Options {
  userId String @id
  Users  Users  @relation(fields: [userId], references: [id])
}

model Payments {
  id          Int           @id @default(autoincrement())
  userId      String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String
  status      PaymentStatus
  provider    String?
  providerRef String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Users       Users         @relation(fields: [userId], references: [id])
}

model Periods {
  id                                         Int               @id @default(autoincrement())
  userId                                     String
  input_date_time                            DateTime
  hebrew_day                                 Int
  hebrew_month                               Int
  hebrew_year                                Int
  onah                                       Onah
  type                                       Type
  notes                                      String?
  created_at                                 DateTime          @default(now())
  FixedVesets_FixedVesets_period1IdToPeriods FixedVesets?      @relation("FixedVesets_period1IdToPeriods")
  FixedVesets_FixedVesets_period2IdToPeriods FixedVesets?      @relation("FixedVesets_period2IdToPeriods")
  FixedVesets_FixedVesets_period3IdToPeriods FixedVesets?      @relation("FixedVesets_period3IdToPeriods")
  Users                                      Users             @relation(fields: [userId], references: [id])
  PotentialVesets                            PotentialVesets[]
}

model PotentialVesets {
  id               Int       @id @default(autoincrement())
  userId           String
  type             VesetType
  periodId         Int
  expectedDateTime DateTime
  onah             Onah
  notes            String?
  createdAt        DateTime  @default(now())
  Periods          Periods   @relation(fields: [periodId], references: [id])
  Users            Users     @relation(fields: [userId], references: [id])
}

model Users {
  id              String            @id @default(uuid())
  name_encrypt    String
  name_iv         String
  name_tag        String
  email_encrypt   String
  email_iv        String
  email_tag       String
  email_hash      String            @unique
  password_hash   String
  FixedVesets     FixedVesets?
  Options         Options?
  Payments        Payments[]
  Periods         Periods[]
  PotentialVesets PotentialVesets[]
}

enum Onah {
  day
  night
}

enum PaymentMethod {
  paypal
  bankTransfer
  card
}

enum PaymentStatus {
  success
  fail
  pending
  cancelled
}

enum Type {
  period
  staining
  birth
  miscarriage
}

enum VesetType {
  chodesh
  haflaga
  beinoni
}
